// Code generated by go-bindata.
// sources:
// templates/html/inventory.html
// DO NOT EDIT!

package html

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlInventoryHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\xef\x6f\xe3\x44\x10\xfd\xdc\xfc\x15\x83\xa9\x04\x48\xb5\x7d\x2d\xba\x42\x7b\xb6\x25\x54\xae\xa2\xd2\xc1\x01\x6d\x05\x7c\x1c\xdb\x93\x78\x60\xbd\xeb\xdb\x9d\x24\x97\x5a\xf9\xdf\xd1\xae\xed\x34\x69\x7b\xfc\xf8\x12\x7b\xd7\x6f\xde\x1b\xbf\x79\xeb\x64\x9f\x7d\xff\xfe\xea\xee\x8f\x9f\xdf\x42\x23\xad\x2a\x66\x99\xbf\x80\x42\xbd\xc8\x23\xd2\x51\x31\x03\xc8\x1a\xc2\xba\x98\x1d\x01\x64\xc2\xa2\xa8\xf8\xad\x31\x5f\x38\x78\xaf\xe1\x9a\xad\x13\xb8\xfd\xe5\x1d\x0b\xc1\x8d\x5e\x91\x16\x63\x37\x59\x3a\xc0\x42\x45\x4b\x82\xd0\x88\x74\x31\x7d\x58\xf2\x2a\x8f\xae\x8c\x16\xd2\x12\xdf\x6d\x3a\x8a\xa0\x1a\x56\x79\x24\xf4\x51\x52\xaf\xfd\x06\xaa\x06\xad\x23\xc9\xef\xef\xae\xe3\x6f\xa3\x3d\x1a\x8d\x2d\xe5\x91\xa5\x39\x59\x4b\x76\xaf\xd8\x58\x5e\xb0\x8e\x3e\xa1\xf8\x7b\x7c\xff\x5d\x7c\x65\xda\x0e\x85\x4b\xb5\x2f\x7a\xf3\x36\xbf\x88\x20\x7d\x26\x81\x5d\xa7\x28\x6e\x4d\xc9\x8a\xe2\x35\x95\x31\x76\x5d\x5c\x61\x87\x87\xe5\x1b\x72\xff\xb9\xda\x09\xca\xd2\xc5\x25\xda\xd8\xc9\xe6\x80\xa6\x54\x58\xfd\xf5\x12\xd1\x0f\xa8\xeb\x86\x54\x7d\x6d\x99\x74\xad\x36\xfb\x76\xd9\x25\xbd\x54\xb2\x62\x5a\x77\xc6\xca\x1e\x74\xcd\xb5\x34\x79\x4d\x2b\xae\x28\x0e\x8b\x13\x60\xcd\xc2\xa8\x62\x57\xa1\xa2\xfc\xf4\x04\x5a\xfc\xc8\xed\xb2\xdd\xdb\x60\x7d\xb8\xb1\x74\x64\xc3\xca\x9b\x90\x6b\xb3\x53\x0f\xaf\x03\xb2\xe9\x68\x9c\x62\xe5\xdc\x30\x0a\x80\xd2\xd4\x1b\xe8\x87\xfb\xb9\xd1\x12\xcf\xb1\x65\xb5\xb9\x04\x87\xda\xc5\x8e\x2c\xcf\xdf\x0c\x4f\x15\x6b\x8a\x1b\xe2\x45\x23\x97\x70\x9a\x7c\x4d\xed\xf8\x60\x3b\x9b\x00\x13\x51\x8b\x76\xc1\x3a\x2e\x8d\x88\x69\x3d\xf8\xf5\x1e\x38\x5c\x86\xdf\xca\xd4\x34\xd5\x1c\x05\xf5\xf5\xc8\xff\xcd\xab\x57\x63\xc1\x51\x65\x94\xb1\x97\xf0\xf9\xc5\xc5\xc5\x13\xc1\xa4\x26\x41\x56\xee\x89\xac\x98\xee\x12\x0e\x24\x47\xb8\x6b\xf0\xec\xf5\xf9\x84\x9e\x78\xcf\xcf\xcf\xf7\x7b\xcb\xd2\x60\x57\x38\x56\xe9\x70\xae\x00\x32\x6f\x53\x31\x9b\x79\x54\xd6\x9c\xfd\xfb\xf9\x6a\xce\x26\x74\x57\xdc\x35\xec\x60\xce\x8a\x60\x8d\x0e\x16\xa4\xc9\xa2\x50\x0d\xe5\x06\xac\x29\x8d\x38\x30\x1a\x32\xef\x45\xd1\xf7\x90\xbc\x43\x27\x3f\x9a\x9a\xe7\x4c\x35\x6c\xb7\x59\x1a\x9e\x24\x70\xd7\x90\x25\x60\x07\xa8\x9c\x01\x84\x16\xab\xc6\x8f\xc4\x12\xd6\x7e\xe2\xb0\x22\xeb\xd8\x68\xc0\x15\x72\xc8\x00\xa0\x40\x86\xd0\x58\x9a\xe7\x11\x4f\xcd\x25\x7f\x3a\xa3\xa3\xe2\x70\x9d\xa5\x58\x24\x59\xda\x4d\x5d\x2f\x55\x11\x6e\xfa\x1e\x2c\xea\x05\xc1\x31\x9f\xc0\xb1\x85\xcb\x1c\x92\x5f\xc9\xe7\xd7\xc1\x76\x3b\x82\x15\x0f\xe0\x10\x35\x6b\xf4\xa2\xd8\xa9\xf6\x3d\x1c\xdb\xe4\x27\x6c\x09\xb6\xdb\xa4\x7c\x38\x8b\x8a\x83\x2d\xaf\xeb\x1d\x0f\x55\x90\xb9\x16\x95\x82\x4a\xa1\x73\x79\x34\x8c\x6b\x2a\xb8\x0d\x2b\xff\x91\xb0\xe4\xdc\x68\x4d\xc0\x17\x59\x69\x7d\xd4\xc7\x16\x6a\x5e\x4d\x0c\x63\x3e\x7c\xd6\xfb\x1e\x78\x0e\xf4\xc1\x53\x5d\x99\xa5\x16\x38\x85\xed\x36\x8c\xa6\x46\xc1\x12\x1d\x85\x03\x89\xac\xdd\x30\x8c\x89\xa4\xf2\xe8\xa8\x30\x9a\xc6\x51\xc0\x93\xe9\x5b\xaa\x8c\xad\xfb\x1e\x48\x39\xfa\x7f\xa4\xc3\xab\x85\x7e\x6e\xc5\xb2\x5e\x3c\x0e\xfc\x65\x15\xe7\x65\xb4\x7f\x79\x40\x5d\xfb\x34\x1c\xd0\x3a\x7e\xa0\x9d\x61\xfc\x40\x8f\x76\x3d\xa3\xaf\x1e\x9d\xf4\x4c\xff\x48\xf3\xac\x78\xa9\x1f\xcb\x93\x03\xfb\x6f\x24\xa4\xbc\xb2\x14\x32\x7e\x40\x5b\xa3\xec\x68\xf7\x53\xfe\x8c\xde\x37\xf4\xa5\x34\x14\x5c\x04\x16\x47\x6a\xfe\x55\xe0\x55\xe8\x04\x96\x5d\x1d\xc8\xa7\x63\xf3\x29\xfe\xfb\x80\x7b\xca\x9e\x4c\x41\x49\x6b\x5e\x0d\x6d\x67\xe9\x14\xe1\x9d\xbd\xe3\xbe\x3f\x07\xe1\x4b\x30\x7c\x00\xb2\x74\xf8\x0f\xfe\x3b\x00\x00\xff\xff\x30\xf4\x26\x22\x94\x07\x00\x00")

func templatesHtmlInventoryHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInventoryHtml,
		"templates/html/inventory.html",
	)
}

func templatesHtmlInventoryHtml() (*asset, error) {
	bytes, err := templatesHtmlInventoryHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inventory.html", size: 1940, mode: os.FileMode(420), modTime: time.Unix(1513814450, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/inventory.html": templatesHtmlInventoryHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"inventory.html": &bintree{templatesHtmlInventoryHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

