// Code generated by go-bindata.
// sources:
// templates/html/inventory.html
// DO NOT EDIT!

package html

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlInventoryHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xcf\xeb\xd3\x40\x10\xc5\xcf\xf6\xaf\x18\xf7\xe2\xe5\xbb\x04\x6f\x8a\xbb\x01\xa9\xdf\x62\x41\xa8\x62\x8b\x7a\x9c\x24\x63\x33\xb8\xbf\xdc\x9d\xa4\xcd\x7f\x2f\x4d\x2e\x29\x56\xf0\xb4\xfb\x1e\xf3\xde\x07\x86\x31\x2f\x3f\x1c\xb6\xc7\x1f\x9f\x9f\xa1\x17\xef\xea\x8d\xb9\x3d\xe0\x30\x9c\xad\xa2\xa0\xea\x0d\x80\xe9\x09\xbb\x7a\xf3\x02\xc0\x08\x8b\xa3\xfa\x5b\x1f\x5f\x15\x38\x04\xd8\x71\x2e\x02\x5f\xbf\x7c\x62\x21\xd8\x87\x91\x82\xc4\x3c\x99\x6a\x19\x9b\x13\x9e\x04\xa1\x17\x49\x9a\x7e\x0f\x3c\x5a\xb5\x8d\x41\x28\x88\x3e\x4e\x89\x14\xb4\x8b\xb2\x4a\xe8\x2a\xd5\x8d\xfd\x0e\xda\x1e\x73\x21\xb1\xa7\xe3\x4e\xbf\x51\xab\x9a\x80\x9e\xac\xca\xf4\x93\x72\xa6\xbc\x0a\xc7\xcc\x67\x0e\xea\x1f\xc4\xef\xfa\xf4\x5e\x6f\xa3\x4f\x28\xdc\xb8\x35\x74\xff\x6c\xdf\x2a\xa8\xfe\x42\x60\x4a\x8e\xb4\x8f\x0d\x3b\xd2\x17\x6a\x34\xa6\xa4\x5b\x4c\x78\x1f\x9f\xa8\xfc\x77\xba\x08\xca\x50\x74\x83\x59\x17\x99\xee\x6a\x1a\x87\xed\xaf\x47\x45\x1f\x31\x74\x3d\xb9\x6e\x97\x99\x42\xe7\xa6\xf5\xba\xf2\x40\x8f\x22\x23\xd3\x25\xc5\x2c\xab\xd1\x0b\x77\xd2\xdb\x8e\x46\x6e\x49\xcf\xe2\x09\x38\xb0\x30\x3a\x5d\x5a\x74\x64\x5f\x3f\x81\xc7\x2b\xfb\xc1\xaf\x0c\x0e\xf7\xc6\x50\x28\xcf\xea\xb6\x04\x1b\xe2\x4c\x07\x30\xd5\x72\x1d\x00\xa6\x89\xdd\xb4\x58\xcb\xcf\x54\xcb\x49\xfd\x09\x00\x00\xff\xff\x3f\x9e\x88\x85\x63\x02\x00\x00")

func templatesHtmlInventoryHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInventoryHtml,
		"templates/html/inventory.html",
	)
}

func templatesHtmlInventoryHtml() (*asset, error) {
	bytes, err := templatesHtmlInventoryHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inventory.html", size: 611, mode: os.FileMode(420), modTime: time.Unix(1513798337, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/inventory.html": templatesHtmlInventoryHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"inventory.html": &bintree{templatesHtmlInventoryHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

