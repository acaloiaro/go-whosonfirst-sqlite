// Code generated by go-bindata.
// sources:
// templates/html/inventory.html
// DO NOT EDIT!

package html

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlInventoryHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x6d\x8f\xe3\x34\x10\xfe\x4c\x7f\xc5\x43\xb4\x12\x20\x6d\x12\xdd\x49\x20\x5e\x9c\x48\x68\xb9\x15\x2b\x1d\x1c\xb0\x5d\x01\x1f\x27\xf1\xb4\x31\x38\x76\xce\x9e\x74\xaf\x57\xe5\xbf\xa3\xbc\xec\x36\x15\x07\xba\x4f\xad\xa7\xcf\xcb\xf8\x99\x71\xd5\xa7\x3f\xbc\xb9\xd9\xfe\xf9\xcb\x2b\x34\xd2\xda\x72\xa3\xc6\x0f\x58\x72\xfb\x22\x61\x97\x94\x1b\x40\x35\x4c\xba\xdc\x7c\x02\x28\x31\x62\xb9\xfc\xbd\xf1\x9f\x45\xbc\x71\xb8\x35\x21\x0a\xee\x7f\x7d\x6d\x84\x71\xe7\x0e\xec\xc4\x87\xa3\xca\x67\xd8\xc4\x68\x59\x08\x8d\x48\x97\xf2\xdb\xde\x1c\x8a\xe4\xc6\x3b\x61\x27\xe9\xf6\xd8\x71\x82\x7a\x3e\x15\x89\xf0\x3b\xc9\x47\xef\xef\x50\x37\x14\x22\x4b\xf1\xb0\xbd\x4d\xbf\x4e\x56\x32\x8e\x5a\x2e\x92\xc0\x3b\x0e\x81\xc3\x8a\xec\x83\xd9\x1b\x97\xfc\x87\xe3\x1f\xe9\xc3\xf7\xe9\x8d\x6f\x3b\x12\x53\xd9\xb5\xe9\xdd\xab\xe2\x9b\x04\xf9\xbf\x2c\xa8\xeb\x2c\xa7\xad\xaf\x8c\xe5\xf4\x91\xab\x94\xba\x2e\xad\xa9\xa3\x4b\xfa\x91\xe3\x47\xb3\xa3\x90\xf4\x31\xad\x28\xa4\x51\x8e\x17\x32\x95\xa5\xfa\xef\x0f\x09\xfd\x48\x4e\x37\x6c\xf5\x6d\x30\xec\xb4\x3d\xae\xe3\x0a\x3d\x7f\x88\x72\x30\xfc\xd8\xf9\x20\x2b\xe8\xa3\xd1\xd2\x14\x9a\x0f\xa6\xe6\x74\x3a\x5c\xc3\x38\x23\x86\x6c\x1a\x6b\xb2\x5c\xbc\xb8\x46\x4b\xef\x4c\xdb\xb7\xab\x82\x71\x97\x85\x3e\x72\x98\x4e\x63\x08\x85\xf3\x93\x3b\xa0\xf2\x79\x3b\x00\x55\x79\x7d\x2c\x37\x1b\x00\x50\x5d\xb9\x6d\x4c\xc4\xce\x58\xc6\x23\x45\xec\xd9\x71\x20\x61\x8d\xea\x88\xe0\x2b\x2f\x11\xde\x41\xd5\x5e\x73\x79\x3a\x21\x7b\x4d\x51\x7e\xf2\xda\xec\x0c\x6b\x0c\x83\xca\xa7\x5f\x32\x6c\x1b\x0e\x0c\x13\x41\x36\x7a\x10\x5a\xaa\x1b\xe3\x38\x0d\x4c\x7a\xec\x04\x07\x0e\xd1\x78\x07\x3a\x90\x99\x7a\x03\x09\x14\xa1\x09\xbc\x2b\x12\xf3\xb4\x94\xd9\x5f\xd1\xbb\xa4\xbc\x3c\xab\x9c\xca\x4c\xe5\xdd\x53\xd7\xbd\x2d\xa7\x2f\xa7\x13\x02\xb9\x3d\xe3\xca\x5c\xe3\x2a\xe0\xdb\x02\xd9\x6f\x3c\xe6\x1a\x31\x0c\x0b\xd8\x9a\x19\x0c\xa8\x28\xc1\xbb\x7d\xf9\xec\x7a\x3a\xe1\x2a\x64\x3f\x53\xcb\x18\x86\xac\x7a\xff\x32\x29\x2f\x4a\xa3\xaf\xca\x17\x16\x54\x6c\xc9\xda\x05\x71\xdf\xd0\xcb\x2f\xbf\x1a\xb7\x35\x70\x8c\x4b\x16\x33\x40\x55\x61\xce\x7c\x69\xd1\xec\xc0\x6f\x47\xce\x8d\xef\x9d\xe0\x05\x86\x61\x0a\x5d\x93\x50\x45\x91\xd1\x50\x5c\x12\xf6\x8e\x97\x44\x11\xb8\xf6\x41\x9f\x4e\x60\x1b\xf9\x7f\x28\x73\x3b\xb3\xf4\xf3\x3c\x16\x76\x1c\xe9\x6e\xec\x2d\xbb\x68\xea\x4e\xc6\x49\x2d\x17\x31\xef\xf9\x7c\x8d\x7b\x09\xc6\xed\x31\x0c\xa8\xcf\x57\x23\xa7\x57\xe0\x33\xa4\x77\x67\x50\xa6\xb0\x76\xb8\xec\x76\xdc\xac\x3a\xf0\xb4\x57\xb3\xd0\x7a\x8d\xce\x82\xa3\xd1\xe7\xd2\xf0\xc4\x84\x91\xc8\x76\xf7\xc5\xc4\xb6\x14\x05\x7d\xa7\x27\x09\xef\x56\x2a\x0f\x53\xf1\x59\x23\x9b\x87\x9e\x3f\x4d\xfd\x39\x81\xa5\x3e\xae\xce\xf4\x1c\xe6\x57\xa0\xf2\xf9\xef\xf4\x9f\x00\x00\x00\xff\xff\x73\xca\x1d\x47\x5f\x05\x00\x00")

func templatesHtmlInventoryHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInventoryHtml,
		"templates/html/inventory.html",
	)
}

func templatesHtmlInventoryHtml() (*asset, error) {
	bytes, err := templatesHtmlInventoryHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inventory.html", size: 1375, mode: os.FileMode(420), modTime: time.Unix(1513810345, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/inventory.html": templatesHtmlInventoryHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"inventory.html": &bintree{templatesHtmlInventoryHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

